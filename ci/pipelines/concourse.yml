resource_types:
- name: registry-image-beta
  type: registry-image
  source: {repository: concourse/registry-image-resource}

groups:
- name: develop
  jobs:
  - unit
  - dev-image
  - testflight
  - watsjs
  - build-rc

- name: images
  jobs:
  - unit-image

jobs:
- name: unit
  public: true
  serial: true
  plan:
  - aggregate:
    - get: concourse
      trigger: true
    - get: unit-image
  - task: yarn-test
    image: unit-image
    file: concourse/ci/tasks/yarn-test.yml
  - aggregate:
    - task: unit
      image: unit-image
      file: concourse/ci/tasks/unit.yml
      input_mapping: {concourse: built-concourse}
    - task: fly-darwin
      file: concourse/ci/tasks/fly-darwin.yml
    - task: fly-windows
      file: concourse/ci/tasks/fly-windows.yml

- name: dev-image
  public: true
  serial: true
  plan:
  - aggregate:
    - get: concourse
      passed: [unit]
      trigger: true
    - get: unit-image
      passed: [unit]
    - get: gdn
      trigger: true
    - get: dumb-init
      trigger: true
    - get: mock-resource
      trigger: true
    - get: registry-image-resource
      trigger: true
    - get: git-resource
      trigger: true
    - get: time-resource
      trigger: true
    - get: builder
  - task: yarn-build
    image: unit-image
    file: concourse/ci/tasks/yarn-build.yml
  - task: build
    image: builder
    privileged: true
    input_mapping: {concourse: built-concourse}
    config:
      platform: linux
      params:
        REPOSITORY: concourse/dev
        DOCKERFILE: concourse/ci/dockerfiles/dev/Dockerfile
      inputs:
      - name: concourse
      - name: dumb-init
      - name: gdn
      - name: mock-resource
      - name: registry-image-resource
      - name: time-resource
      - name: git-resource
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: dev-image
    params: {image: image/image.tar}
    get_params: {format: oci}

- name: testflight
  public: true
  max_in_flight: 2
  plan:
  - aggregate:
    - get: concourse
      passed: [dev-image]
      trigger: true
    - get: unit-image
      passed: [dev-image]
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
  - task: testflight
    image: unit-image
    privileged: true
    timeout: 1h
    file: concourse/ci/tasks/docker-compose-testflight.yml
    params: {DOCKERFILE: ci/dockerfiles/dev-test/Dockerfile}

- name: watsjs
  public: true
  max_in_flight: 2
  plan:
  - aggregate:
    - get: concourse
      passed: [dev-image]
      trigger: true
    - get: unit-image
      passed: [dev-image]
    - get: dev-image
      passed: [dev-image]
      params: {format: oci}
    - get: postgres-image
      params: {format: oci}
  - task: watsjs
    image: unit-image
    privileged: true
    timeout: 1h
    file: concourse/ci/tasks/docker-compose-watsjs.yml
    params: {DOCKERFILE: ci/dockerfiles/dev-test/Dockerfile}

- name: build-rc
  public: true
  plan:
  - aggregate:
    - get: concourse
      passed: [testflight, watsjs]
      trigger: true
    - get: dev-image
      passed: [testflight, watsjs]
  - aggregate:
    - task: fly-linux
      file: concourse/ci/tasks/fly-build-linux.yml
    - task: fly-windows
      file: concourse/ci/tasks/fly-build-windows.yml
    - task: fly-darwin
      file: concourse/ci/tasks/fly-build-darwin.yml
  - aggregate:
    - task: concourse-linux
      image: dev-image
      file: concourse/ci/tasks/concourse-build-linux.yml
    - task: concourse-windows
      file: concourse/ci/tasks/concourse-build-windows.yml
    - task: concourse-darwin
      file: concourse/ci/tasks/concourse-build-darwin.yml

- name: unit-image
  public: true
  serial: true
  plan:
  - aggregate:
    - get: concourse
      resource: unit-dockerfile
      trigger: true
    - get: builder
  - task: build
    image: builder
    privileged: true
    config:
      platform: linux
      params:
        REPOSITORY: concourse/unit
        CONTEXT: concourse/ci/dockerfiles/unit
      inputs: [{name: concourse}]
      outputs: [{name: image}]
      caches: [{path: cache}]
      run: {path: build}
  - put: unit-image
    params: {image: image/image.tar}

resources:
- name: concourse
  type: git
  source:
    uri: https://github.com/concourse/concourse.git
    branch: master

- name: unit-dockerfile
  type: git
  source:
    uri: https://github.com/concourse/concourse.git
    branch: master
    paths: [ci/dockerfiles/unit]

- name: dev-image
  type: registry-image-beta
  source:
    repository: concourse/dev
    username: ((docker.username))
    password: ((docker.password))

- name: unit-image
  type: registry-image-beta
  source:
    repository: concourse/unit
    username: ((docker.username))
    password: ((docker.password))

- name: postgres-image
  type: registry-image
  source: {repository: postgres}

- name: dumb-init
  type: github-release
  source:
    owner: Yelp
    repository: dumb-init
    access_token: ((concourse_github_dummy.access_token))

- name: gdn
  type: github-release
  source:
    owner: cloudfoundry
    repository: garden-runc-release
    access_token: ((concourse_github_dummy.access_token))

- name: mock-resource
  type: github-release
  source:
    owner: concourse
    repository: mock-resource
    access_token: ((concourse_github_dummy.access_token))

- name: registry-image-resource
  type: github-release
  source:
    owner: concourse
    repository: registry-image-resource
    access_token: ((concourse_github_dummy.access_token))

- name: git-resource
  type: github-release
  source:
    owner: concourse
    repository: git-resource
    access_token: ((concourse_github_dummy.access_token))

- name: time-resource
  type: github-release
  source:
    owner: concourse
    repository: time-resource
    access_token: ((concourse_github_dummy.access_token))

- name: builder
  type: registry-image
  source: {repository: concourse/builder}
