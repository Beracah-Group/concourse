#!/bin/bash

set -eo pipefail

trap "cat /tmp/pids | xargs kill" EXIT

mkdir -p ~/.kube

if [ ! -f ~/.kube/config ]; then
  echo "$KUBE_CONFIG" > ~/.kube/config
fi

if [ -z $RELEASE_NAME ]; then
  RELEASE_NAME="concourse"
fi

if [ -z $ATC_USERNAME ]; then
  ATC_USERNAME="test"
fi

if [ -z $ATC_PASSWORD ]; then
  ATC_PASSWORD="test"
fi

app="${RELEASE_NAME}-web"

pod_name=$(kubectl get pods -l app="$app" -o jsonpath='{.items[0].metadata.name}')

kubectl port-forward "$pod_name" "8080:8080" >/dev/null 2>&1 &
echo $! >> /tmp/pids
external_ip='127.0.0.1'

until curl -s -f "http://$external_ip:8080/api/v1/info"; do
  echo "Waiting for atc to be running ..."
  sleep 5
done

internal_ip=$(kubectl get po "$pod_name" -o jsonpath='{.status.podIP}')

bearer_token=$(curl -f -u fly:Zmx5 "http://$external_ip:8080/sky/token" -d "grant_type=password&username=$ATC_USERNAME&password=$ATC_PASSWORD&scope=openid+profile+email+federated:id+groups" | jq -r '.access_token')

until curl -s -f -H"Authorization:Bearer $bearer_token" "http://$external_ip:8080/api/v1/workers" | jq -r '.[] | .state' | grep 'running'; do
  echo "Waiting for worker to be running ..."
  sleep 5
done

ports=$(curl -H"Authorization:Bearer $bearer_token" "http://$external_ip:8080/api/v1/workers" | jq -r '.[] | .addr,.baggageclaim_url' | awk -F: '{print $NF}')

set -x

for port in $ports; do
  iptables -t nat -A OUTPUT -m tcp -p tcp -d "$internal_ip" --dport "$port" -j DNAT --to-destination "127.0.0.1:$port"
  kubectl port-forward "$pod_name" "$port:$port" >/dev/null &
  echo $! >> /tmp/pids
done

ATC_URL="http://$external_ip:8080" concourse/ci/tasks/scripts/testflight
