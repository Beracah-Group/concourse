// Code generated by counterfeiter. DO NOT EDIT.
package enginefakes

import (
	sync "sync"

	db "github.com/concourse/concourse/atc/db"
	engine "github.com/concourse/concourse/atc/engine"
)

type FakeBuildDelegateFactory struct {
	DelegateStub        func(db.Build) engine.BuildDelegate
	delegateMutex       sync.RWMutex
	delegateArgsForCall []struct {
		arg1 db.Build
	}
	delegateReturns struct {
		result1 engine.BuildDelegate
	}
	delegateReturnsOnCall map[int]struct {
		result1 engine.BuildDelegate
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBuildDelegateFactory) Delegate(arg1 db.Build) engine.BuildDelegate {
	fake.delegateMutex.Lock()
	ret, specificReturn := fake.delegateReturnsOnCall[len(fake.delegateArgsForCall)]
	fake.delegateArgsForCall = append(fake.delegateArgsForCall, struct {
		arg1 db.Build
	}{arg1})
	fake.recordInvocation("Delegate", []interface{}{arg1})
	fake.delegateMutex.Unlock()
	if fake.DelegateStub != nil {
		return fake.DelegateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.delegateReturns
	return fakeReturns.result1
}

func (fake *FakeBuildDelegateFactory) DelegateCallCount() int {
	fake.delegateMutex.RLock()
	defer fake.delegateMutex.RUnlock()
	return len(fake.delegateArgsForCall)
}

func (fake *FakeBuildDelegateFactory) DelegateCalls(stub func(db.Build) engine.BuildDelegate) {
	fake.delegateMutex.Lock()
	defer fake.delegateMutex.Unlock()
	fake.DelegateStub = stub
}

func (fake *FakeBuildDelegateFactory) DelegateArgsForCall(i int) db.Build {
	fake.delegateMutex.RLock()
	defer fake.delegateMutex.RUnlock()
	argsForCall := fake.delegateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBuildDelegateFactory) DelegateReturns(result1 engine.BuildDelegate) {
	fake.delegateMutex.Lock()
	defer fake.delegateMutex.Unlock()
	fake.DelegateStub = nil
	fake.delegateReturns = struct {
		result1 engine.BuildDelegate
	}{result1}
}

func (fake *FakeBuildDelegateFactory) DelegateReturnsOnCall(i int, result1 engine.BuildDelegate) {
	fake.delegateMutex.Lock()
	defer fake.delegateMutex.Unlock()
	fake.DelegateStub = nil
	if fake.delegateReturnsOnCall == nil {
		fake.delegateReturnsOnCall = make(map[int]struct {
			result1 engine.BuildDelegate
		})
	}
	fake.delegateReturnsOnCall[i] = struct {
		result1 engine.BuildDelegate
	}{result1}
}

func (fake *FakeBuildDelegateFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.delegateMutex.RLock()
	defer fake.delegateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBuildDelegateFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ engine.BuildDelegateFactory = new(FakeBuildDelegateFactory)
