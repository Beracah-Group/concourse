// Code generated by counterfeiter. DO NOT EDIT.
package resourcefakes

import (
	sync "sync"

	lager "code.cloudfoundry.org/lager"
	atc "github.com/concourse/concourse/atc"
	creds "github.com/concourse/concourse/atc/creds"
	resource "github.com/concourse/concourse/atc/resource"
	worker "github.com/concourse/concourse/atc/worker"
)

type FakeFetchSourceProviderFactory struct {
	NewFetchSourceProviderStub        func(lager.Logger, resource.Session, resource.Metadata, atc.Tags, int, creds.VersionedResourceTypes, resource.ResourceInstance, worker.ImageFetchingDelegate) resource.FetchSourceProvider
	newFetchSourceProviderMutex       sync.RWMutex
	newFetchSourceProviderArgsForCall []struct {
		arg1 lager.Logger
		arg2 resource.Session
		arg3 resource.Metadata
		arg4 atc.Tags
		arg5 int
		arg6 creds.VersionedResourceTypes
		arg7 resource.ResourceInstance
		arg8 worker.ImageFetchingDelegate
	}
	newFetchSourceProviderReturns struct {
		result1 resource.FetchSourceProvider
	}
	newFetchSourceProviderReturnsOnCall map[int]struct {
		result1 resource.FetchSourceProvider
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetchSourceProviderFactory) NewFetchSourceProvider(arg1 lager.Logger, arg2 resource.Session, arg3 resource.Metadata, arg4 atc.Tags, arg5 int, arg6 creds.VersionedResourceTypes, arg7 resource.ResourceInstance, arg8 worker.ImageFetchingDelegate) resource.FetchSourceProvider {
	fake.newFetchSourceProviderMutex.Lock()
	ret, specificReturn := fake.newFetchSourceProviderReturnsOnCall[len(fake.newFetchSourceProviderArgsForCall)]
	fake.newFetchSourceProviderArgsForCall = append(fake.newFetchSourceProviderArgsForCall, struct {
		arg1 lager.Logger
		arg2 resource.Session
		arg3 resource.Metadata
		arg4 atc.Tags
		arg5 int
		arg6 creds.VersionedResourceTypes
		arg7 resource.ResourceInstance
		arg8 worker.ImageFetchingDelegate
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.recordInvocation("NewFetchSourceProvider", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.newFetchSourceProviderMutex.Unlock()
	if fake.NewFetchSourceProviderStub != nil {
		return fake.NewFetchSourceProviderStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newFetchSourceProviderReturns
	return fakeReturns.result1
}

func (fake *FakeFetchSourceProviderFactory) NewFetchSourceProviderCallCount() int {
	fake.newFetchSourceProviderMutex.RLock()
	defer fake.newFetchSourceProviderMutex.RUnlock()
	return len(fake.newFetchSourceProviderArgsForCall)
}

func (fake *FakeFetchSourceProviderFactory) NewFetchSourceProviderCalls(stub func(lager.Logger, resource.Session, resource.Metadata, atc.Tags, int, creds.VersionedResourceTypes, resource.ResourceInstance, worker.ImageFetchingDelegate) resource.FetchSourceProvider) {
	fake.newFetchSourceProviderMutex.Lock()
	defer fake.newFetchSourceProviderMutex.Unlock()
	fake.NewFetchSourceProviderStub = stub
}

func (fake *FakeFetchSourceProviderFactory) NewFetchSourceProviderArgsForCall(i int) (lager.Logger, resource.Session, resource.Metadata, atc.Tags, int, creds.VersionedResourceTypes, resource.ResourceInstance, worker.ImageFetchingDelegate) {
	fake.newFetchSourceProviderMutex.RLock()
	defer fake.newFetchSourceProviderMutex.RUnlock()
	argsForCall := fake.newFetchSourceProviderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *FakeFetchSourceProviderFactory) NewFetchSourceProviderReturns(result1 resource.FetchSourceProvider) {
	fake.newFetchSourceProviderMutex.Lock()
	defer fake.newFetchSourceProviderMutex.Unlock()
	fake.NewFetchSourceProviderStub = nil
	fake.newFetchSourceProviderReturns = struct {
		result1 resource.FetchSourceProvider
	}{result1}
}

func (fake *FakeFetchSourceProviderFactory) NewFetchSourceProviderReturnsOnCall(i int, result1 resource.FetchSourceProvider) {
	fake.newFetchSourceProviderMutex.Lock()
	defer fake.newFetchSourceProviderMutex.Unlock()
	fake.NewFetchSourceProviderStub = nil
	if fake.newFetchSourceProviderReturnsOnCall == nil {
		fake.newFetchSourceProviderReturnsOnCall = make(map[int]struct {
			result1 resource.FetchSourceProvider
		})
	}
	fake.newFetchSourceProviderReturnsOnCall[i] = struct {
		result1 resource.FetchSourceProvider
	}{result1}
}

func (fake *FakeFetchSourceProviderFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newFetchSourceProviderMutex.RLock()
	defer fake.newFetchSourceProviderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFetchSourceProviderFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.FetchSourceProviderFactory = new(FakeFetchSourceProviderFactory)
