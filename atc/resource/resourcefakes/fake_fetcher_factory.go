// Code generated by counterfeiter. DO NOT EDIT.
package resourcefakes

import (
	sync "sync"

	resource "github.com/concourse/concourse/atc/resource"
	worker "github.com/concourse/concourse/atc/worker"
)

type FakeFetcherFactory struct {
	FetcherForStub        func(worker.Client) resource.Fetcher
	fetcherForMutex       sync.RWMutex
	fetcherForArgsForCall []struct {
		arg1 worker.Client
	}
	fetcherForReturns struct {
		result1 resource.Fetcher
	}
	fetcherForReturnsOnCall map[int]struct {
		result1 resource.Fetcher
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetcherFactory) FetcherFor(arg1 worker.Client) resource.Fetcher {
	fake.fetcherForMutex.Lock()
	ret, specificReturn := fake.fetcherForReturnsOnCall[len(fake.fetcherForArgsForCall)]
	fake.fetcherForArgsForCall = append(fake.fetcherForArgsForCall, struct {
		arg1 worker.Client
	}{arg1})
	fake.recordInvocation("FetcherFor", []interface{}{arg1})
	fake.fetcherForMutex.Unlock()
	if fake.FetcherForStub != nil {
		return fake.FetcherForStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.fetcherForReturns
	return fakeReturns.result1
}

func (fake *FakeFetcherFactory) FetcherForCallCount() int {
	fake.fetcherForMutex.RLock()
	defer fake.fetcherForMutex.RUnlock()
	return len(fake.fetcherForArgsForCall)
}

func (fake *FakeFetcherFactory) FetcherForCalls(stub func(worker.Client) resource.Fetcher) {
	fake.fetcherForMutex.Lock()
	defer fake.fetcherForMutex.Unlock()
	fake.FetcherForStub = stub
}

func (fake *FakeFetcherFactory) FetcherForArgsForCall(i int) worker.Client {
	fake.fetcherForMutex.RLock()
	defer fake.fetcherForMutex.RUnlock()
	argsForCall := fake.fetcherForArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFetcherFactory) FetcherForReturns(result1 resource.Fetcher) {
	fake.fetcherForMutex.Lock()
	defer fake.fetcherForMutex.Unlock()
	fake.FetcherForStub = nil
	fake.fetcherForReturns = struct {
		result1 resource.Fetcher
	}{result1}
}

func (fake *FakeFetcherFactory) FetcherForReturnsOnCall(i int, result1 resource.Fetcher) {
	fake.fetcherForMutex.Lock()
	defer fake.fetcherForMutex.Unlock()
	fake.FetcherForStub = nil
	if fake.fetcherForReturnsOnCall == nil {
		fake.fetcherForReturnsOnCall = make(map[int]struct {
			result1 resource.Fetcher
		})
	}
	fake.fetcherForReturnsOnCall[i] = struct {
		result1 resource.Fetcher
	}{result1}
}

func (fake *FakeFetcherFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetcherForMutex.RLock()
	defer fake.fetcherForMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFetcherFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resource.FetcherFactory = new(FakeFetcherFactory)
