// Code generated by counterfeiter. DO NOT EDIT.
package maxinflightfakes

import (
	sync "sync"

	lager "code.cloudfoundry.org/lager"
	db "github.com/concourse/concourse/atc/db"
	maxinflight "github.com/concourse/concourse/atc/scheduler/maxinflight"
)

type FakeUpdater struct {
	UpdateMaxInFlightReachedStub        func(lager.Logger, db.Job, int) (bool, error)
	updateMaxInFlightReachedMutex       sync.RWMutex
	updateMaxInFlightReachedArgsForCall []struct {
		arg1 lager.Logger
		arg2 db.Job
		arg3 int
	}
	updateMaxInFlightReachedReturns struct {
		result1 bool
		result2 error
	}
	updateMaxInFlightReachedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdater) UpdateMaxInFlightReached(arg1 lager.Logger, arg2 db.Job, arg3 int) (bool, error) {
	fake.updateMaxInFlightReachedMutex.Lock()
	ret, specificReturn := fake.updateMaxInFlightReachedReturnsOnCall[len(fake.updateMaxInFlightReachedArgsForCall)]
	fake.updateMaxInFlightReachedArgsForCall = append(fake.updateMaxInFlightReachedArgsForCall, struct {
		arg1 lager.Logger
		arg2 db.Job
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateMaxInFlightReached", []interface{}{arg1, arg2, arg3})
	fake.updateMaxInFlightReachedMutex.Unlock()
	if fake.UpdateMaxInFlightReachedStub != nil {
		return fake.UpdateMaxInFlightReachedStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateMaxInFlightReachedReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUpdater) UpdateMaxInFlightReachedCallCount() int {
	fake.updateMaxInFlightReachedMutex.RLock()
	defer fake.updateMaxInFlightReachedMutex.RUnlock()
	return len(fake.updateMaxInFlightReachedArgsForCall)
}

func (fake *FakeUpdater) UpdateMaxInFlightReachedCalls(stub func(lager.Logger, db.Job, int) (bool, error)) {
	fake.updateMaxInFlightReachedMutex.Lock()
	defer fake.updateMaxInFlightReachedMutex.Unlock()
	fake.UpdateMaxInFlightReachedStub = stub
}

func (fake *FakeUpdater) UpdateMaxInFlightReachedArgsForCall(i int) (lager.Logger, db.Job, int) {
	fake.updateMaxInFlightReachedMutex.RLock()
	defer fake.updateMaxInFlightReachedMutex.RUnlock()
	argsForCall := fake.updateMaxInFlightReachedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUpdater) UpdateMaxInFlightReachedReturns(result1 bool, result2 error) {
	fake.updateMaxInFlightReachedMutex.Lock()
	defer fake.updateMaxInFlightReachedMutex.Unlock()
	fake.UpdateMaxInFlightReachedStub = nil
	fake.updateMaxInFlightReachedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdater) UpdateMaxInFlightReachedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.updateMaxInFlightReachedMutex.Lock()
	defer fake.updateMaxInFlightReachedMutex.Unlock()
	fake.UpdateMaxInFlightReachedStub = nil
	if fake.updateMaxInFlightReachedReturnsOnCall == nil {
		fake.updateMaxInFlightReachedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.updateMaxInFlightReachedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateMaxInFlightReachedMutex.RLock()
	defer fake.updateMaxInFlightReachedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ maxinflight.Updater = new(FakeUpdater)
