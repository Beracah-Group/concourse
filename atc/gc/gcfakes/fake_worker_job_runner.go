// Code generated by counterfeiter. DO NOT EDIT.
package gcfakes

import (
	sync "sync"

	lager "code.cloudfoundry.org/lager"
	gc "github.com/concourse/concourse/atc/gc"
)

type FakeWorkerJobRunner struct {
	TryStub        func(lager.Logger, string, gc.Job)
	tryMutex       sync.RWMutex
	tryArgsForCall []struct {
		arg1 lager.Logger
		arg2 string
		arg3 gc.Job
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerJobRunner) Try(arg1 lager.Logger, arg2 string, arg3 gc.Job) {
	fake.tryMutex.Lock()
	fake.tryArgsForCall = append(fake.tryArgsForCall, struct {
		arg1 lager.Logger
		arg2 string
		arg3 gc.Job
	}{arg1, arg2, arg3})
	fake.recordInvocation("Try", []interface{}{arg1, arg2, arg3})
	fake.tryMutex.Unlock()
	if fake.TryStub != nil {
		fake.TryStub(arg1, arg2, arg3)
	}
}

func (fake *FakeWorkerJobRunner) TryCallCount() int {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	return len(fake.tryArgsForCall)
}

func (fake *FakeWorkerJobRunner) TryCalls(stub func(lager.Logger, string, gc.Job)) {
	fake.tryMutex.Lock()
	defer fake.tryMutex.Unlock()
	fake.TryStub = stub
}

func (fake *FakeWorkerJobRunner) TryArgsForCall(i int) (lager.Logger, string, gc.Job) {
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	argsForCall := fake.tryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeWorkerJobRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.tryMutex.RLock()
	defer fake.tryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerJobRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gc.WorkerJobRunner = new(FakeWorkerJobRunner)
